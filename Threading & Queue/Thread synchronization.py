"""
‚ñ∂ Thread Synchronization
==========================
Thread synchronization is used to prevent race condition & deadlock.
It means coordinating multiple threads so they safely access shared resources without conflicts or corruption.
It making sure shared data stays safe when many threads want to use it at the same time.

Synchronization Mechanisms -
1Ô∏è‚É£ Lock
2Ô∏è‚É£ RLock
3Ô∏è‚É£ Semaphore
4Ô∏è‚É£ BoundedSemaphore
5Ô∏è‚É£ Event
6Ô∏è‚É£ Condition
7Ô∏è‚É£ Barrier
8Ô∏è‚É£ Timer
"""

import threading

counter = 0
lock = threading.Lock()

def safe_increment():
    global counter
    for _ in range(100000):
        with lock:          # üîí Synchronization: only one thread at a time!
            counter += 1

threads = []
for _ in range(2):
    t = threading.Thread(target=safe_increment)
    threads.append(t)
    t.start()

for t in threads:
    t.join()

print(f"Counter with Lock: {counter} (Expected: 200000)")
